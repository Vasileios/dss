+++
title="Algorithmic Composition Examples"
chapter=true
weight=55
+++


*** chapter 2

*Examples with Routines and Loops*

#+BEGIN_SRC js
(
/*
Algorithmic composition paradigms
BA 181502
Objective: create a Routine and repeat it n times
*/

fork{//this alternative syntax goes for Routine

10.do({//here goes the repetition (10 times)

a = {SinOsc.ar(XLine.kr(100, 500, 4), 0, 0.4)}.play;
4.wait;
a.release;
b = SinOsc.ar(XLine.kr(500, 100, 4), 0, 0.4)}.play;
4.wait;
b.release;

});//loop ends here 
}//fork (Routine) ends here
)
#+END_SRC


 *probability-stochastic*


#+BEGIN_SRC js
/* BA 181502
 Stochastic example 1
Objective: Create two sounds one after the other then free one them (probability), wait a couple of seconds to free also the remain sounds (probability). (Rolling a Dice)
*/

(
fork{
	"sound 1".postln;
        ~a = {Out.ar(0, SinOsc.ar(440, 0, 0.5))}.play;
	2.wait;
	"sound 2".postln;
	~b = {Out.ar(1, SinOsc.ar(443, 0, 0.5))}.play;
	6.wait;

	"dice game".postln;
	"one sound is going to 'die'".postln;
	
	~die = 
	{

	fork{
	var x = [1,2, 3, 4, 5, 6].choose.postln;
	if(x>3,{~a.free},{~b.free});

	"sound 1 or sound 2 is dead?".postln;
	
	if(x>3, {"sound 1 is dead".postln},{"sound 2 is dead".postln});
	4.wait;

	"free the remain sound_n".postln;
	if(~a.isRunning, {~a.free}, {~b.free});
	if(~b.isRunning, {~b.free}, {~a.free});
			
		
};//Sub-routine ends here			
}.value;// ~die ends here	
};//Routine ends here
)
#+END_SRC

*With complex sounds*

#+BEGIN_SRC js



/*
BA 181502
Stochastic example 2
Objective: Create two sounds one after the other, then free one of them and after a while free also the remain sounds using probability. (Rolling a Dice)
*/

(
fork{
	"sound 1".postln;
	~a = {Out.ar([0,1], Resonz.ar(SinOsc.ar(
Dust.kr(XLine.kr(10, 1500, 1500, 100, 40, 4), XLine.kr(100, 400, 400, 200)), 0, LFNoise1.kr(20))
, 440.rand, 0.7)*Saw.ar(XLine.kr(44, 20, 44, 20, 4)).dup)}.play;
	0.1.wait;
	~a.postln;
	4.wait;
	"sound 2".postln;
	~b = {Out.ar([0,1], SinOsc.ar(SinOsc.ar(XLine.kr(10, 1500, 150, 10, 40, 4), 10, XLine.kr(100, 400, 400, 200)), 0, LFNoise1.kr(20)*0.6)*Saw.ar(XLine.kr(44, 20, 440, 20, 4)).dup)}.play;
	0.1.wait;
	~b.postln;
	4.wait;

	"dice game".postln;
	"one sound is going to 'die'".postln;
	
        ~die = 
	{
	
	fork{
	var x = [1,2, 3, 4, 5, 6].choose.postln;
	if(x>3,{~a.free},{~b.free});

	"sound 1 or sound 2 is dead?".postln;
	
	if(x>3, {"sound 1 is dead".postln},{"sound 2 is dead".postln});
			
        4.wait;

	"free the remain sound_n".postln;

	if(~a.isRunning, {~a.free}, {~b.free});
	if(~b.isRunning, {~b.free}, {~a.free});
			

};//Sub-routine ends here						
}.value;// ~die ends here
};//Routine ends here
)

#+END_SRC


*Using Patterns*

Scales and Patterns examples

#+BEGIN_SRC js
/*
BA 181602
Composing music with patterns paradigms
Objective: Create sound textures while you playing a scale. 
Synthesis technique: (FM synthesis) 
*/

//Midi notation

s.boot

(
SynthDef(\synth01, {|out = 0, gate = 1, freq = 220, amp = 0.4, pan = 0, mod = 440, ind = 1|

	var env, source;

	env = EnvGen.kr(Env.adsr(0.01, 0.4, 0.001, 0.0, 1), gate, doneAction: 2);
	source = SinOsc.ar(SinOsc.ar(freq.midicps, mod*freq, ind*freq), 0, amp*env);
	Out.ar(out, source)

//midicps convert MIDI note to cycles per second

}).add;

~pattPm1 = Pseq((60..80)++(79..60)++[\rest], 2);

// Prand((0..14)++(13..0)++[\rest], 2);

~pattPm2  =  Pseq((0..14)++(13..0)++[\rest], 2);

~pattPm3  = Pseq((1..18000), inf);

Pbind(
	\instrument, \synth01,
	\freq, Pseq([~pattPm1, ~pattPm2], 2),
	\dur, 0.25,
	\mod, ~pattPm3,
	\ind, ~pattPm3,
	\amp, Pseq((0.4..0.7), inf)
).play;
)
#+END_SRC

*Example 2 Patterns*

#+BEGIN_SRC js
/*
BA 181602
Composing music with patterns paradigms.
Objective: a) Experiment with patterns and scales b) Change scale and duration after n time, c) play all scales, d) stop the music 
*/

(
fork{
	
~scaleS = Scale.bartok;//experiment with other scales as well. See Scale.directory


~pattP = Prand((0..17)++ [\rest] ++ (16..0)++[\rest], inf);
	
~pattD = Pn(Pgeom(0.25, 1, inf), Pgeom(1, 0.25, inf), inf);
	
~pattD2 = Pn(Prand([0.025, 0.34, 0.16, 1], inf), Pseq([1, 0.34, 0.56, 0.25], inf), inf);
	
Pdef(\first_mov1,
 Pbind(\scale, ~scaleS,
	\degree, ~pattP,
	\dur, ~pattD)).play;

	"start with Bartok scale".postln;

	15.wait;
	
	Pdef(\first_mov1).stop;
	
	"change to Dorian".postln;
	
~scaleS = Scale.dorian;	

Pdef(\first_mov2,
 Pbind(\scale, ~scaleS,
	\degree, ~pattP,
	\dur, ~pattD2)).play;
	
	14.wait;
	"now both".postln;
	
	Pdef(\first_mov1).play;

	3.wait;
        "8s to close".postln;

	8.wait;// change this to a bigger number in case you want more

	Pdef(\first_mov1).stop;
	Pdef(\first_mov2).stop;

	"thats it".postln;
};
)
#+END_SRC


*Playing with Patterns more*

#+BEGIN_SRC js

/*
BA 181802
Playing with Patterns Harmony
Objective: Create Chord progressions
*/
s.boot;

//Example with \note notation simple major chords: I-V-IV-V
(
~soprano = Pbind(\scale, Scale.major, \note,  Pseq([7, 11, 9, 11], inf)).play;

~alto = Pbind(\scale, Scale.major, \note,  Pseq([0, 7, 5, 7], inf)).play;

~tenor = Pbind(\scale, Scale.major, \note,  Pseq([4, 2, 5, 2], inf)).play;

~bass = Pbind(\scale, Scale.major, \note,  Pseq([0, 7, 0, 7], inf)).play;
)

//another example free style minor
//Objective: Create Chord progressions with random delta time

(
~scalem = Scale.minor;
~soprano= Pseq([Pseq([5, 2, 1, 7], 1), Pseq([3, 1, 5, 4], 1)], inf).asStream;
~alto = Pseq([Pseq([3, 11, 9, 7], 1), Pseq([0, 7, 5, 7], 1)], inf).asStream;
~tenor = Pseq([Pseq([4, 2, 0, 9], 1), Pseq([2, 3, 5,  9], 1)], 1).asStream;
~bass = Pseq([Pseq([0, 7, 5,  7], 1), Pseq([0, 3, 6,  7], 1)], 1).asStream;

"n movement".postln;

Pdef(\nmove,
	Pbind(\scale, ~scalem,
		\note, Pn([~soprano, ~alto, ~tenor, ~bass], inf),
		\dur, Pxrand([0.5, 0.75, 1, 2, 0.25, 0.15], inf))).play;
//play forever
)

// see also interval ratios i.e I-V-I-V7: 1/1, 3/2 etc.

~bassoContinuo = Pbind(\freq,  Pseq([440, 440*3/2, 440, 440*15/8], inf)).play
//create the rest voices
~tenor = ...
~alto = ...
~soprano = ...

#+END_SRC



see more on /Streams-Patterns-Events/

[[http://doc.sccode.org/Overviews/Streams.html][Streams]]
