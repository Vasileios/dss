+++
title = "Sound theory basics"
chapter = true
weight = 15
+++


*** chapter 1

**** Sound maths and physics

*Simple interface of a synth*

*source:* A waveform (simple or complex)

arguments of a source i.e periodic oscillators

- frequency: (the cycles per second (Hz)),

- phase: starts at 0 means sine, starts at 1 means cosine

- amplitude: the distance between the top and the bottom of a wave.
  
*Envelope:* the shape of the sound intensity i.e
 - attack time (the starting point of an envelope measured in milliseconds), 
- sustain level(intesity, measured in deciBels)

To generate a sound you can experiment in
the SuperCollider environment.

On SuperCollider you can play a SinOsc UGEN as an audio rate sine
wavetable oscillator.
SinOsc uses the same implementation as Osc except that its table is
fixed to be a sine wave made of 8192 samples.

Example source and envelope:

#+BEGIN_SRC js
//SuperCollider WorkSpace
(
{
    var env = Env([0, 1, 0.5, 1, 0], [0.01, 0.5, 0.02, 0.5]);
    SinOsc.ar(470) * EnvGen.kr(env, doneAction: 2)
}.play
)
#+END_SRC

*Simple engineering tools*

- delay (temporal shift on the order of ms),
- eq (frequency spicific amplifier),
- compressor (automatic gain control)

Example SC:

#+BEGIN_SRC js
DelayL.ar(in: 0, maxdelaytime: 0.2, delaytime: 0.2, mul: 1, add: 0)//Simple delay line with linear interpolation

Compander.ar(in: 0, control: 0, thresh: 0.5, slopeBelow: 1, slopeAbove: 1, clampTime: 0.01, relaxTime: 0.1, mul: 1, add: 0)//Compressor, expander, limiter, gate, ducker

BPeakEQ.ar(in, freq: 1200, rq: 1, db: 0, mul: 1, add: 0)//Parametric equalizer

#+END_SRC

#+BEGIN_SRC js


// Example from sccode-Tutorials

// 2 synthdefs - the 1st to make grains and the 2nd to delay them

// the synthdef that makes the grains is on the left channel
// the synthdef that delays the grains is on the right channel
(
SynthDef("someGrains", { arg centerFreq = 777, freqDev = 200, grainFreq = 2;
    var gate;
    gate = Impulse.kr(grainFreq);
    Out.ar(
        0,
        SinOsc.ar(
            LFNoise0.kr(4, freqDev, centerFreq),
            0,
            EnvGen.kr(Env.sine(0.1), gate, 0.1)
        )
    )
}).add;

SynthDef("aDelay", { arg delay = 0.25;
    Out.ar(
        1,
        DelayN.ar(
            In.ar(0, 1),
            delay,
            delay
        )
    )
}).add;
)

////////////////////////////////////////////////
// test the grains ... and then turn them off
// ... they're all on the left channel ... good!
Synth("someGrains");
////////////////////////////////////////////////

// make 2 groups, the 1st for sources and the 2nd for effects
(
~source = Group.head(s);
~effects = Group.tail(s);
)

// place grains into the delay ... source is on the left and delayed source is on the right
(
Synth.head(~source, "someGrains");
Synth.head(~effects, "aDelay");
)
#+END_SRC

see more here: [[http://doc.sccode.org/Tutorials/Mark_Polishook_tutorial/17_Delays_reverbs.html][sccode]]
